{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","Typography","App","useState","value","setValue","todos","setTodos","addTodo","text","newTodos","complete","gutter","style","display","flexDirection","justifyContent","alignItems","span","marginTop","level","xs","md","lg","onSubmit","e","preventDefault","type","onChange","target","allowClear","required","htmlType","ghost","width","danger","onClick","id","offset","itemLayout","map","todo","index","Item","key","textDecoration","fontSize","actions","newTodo","Array","from","completeTodo","splice","removeTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAOQA,EAAUC,IAAVD,MA+EOE,MAvEf,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAkB,IAF/B,mBAENG,EAFM,KAECC,EAFD,KAUPC,EAAU,SAACC,GACf,IAAMC,EAAiB,sBAAOJ,GAAP,CAAc,CAAEG,OAAME,UAAU,KACvDJ,EAASG,IAkBX,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAKE,OAAQ,CAAC,GAAG,IAAKC,MAAO,CAACC,QAAQ,OAAOC,cAAc,SAASC,eAAe,SAASC,WAAW,WACrG,kBAAC,IAAD,CAAKC,KAAM,GAAIL,MAAO,CAACM,UAAU,SAC/B,kBAACnB,EAAD,CAAOoB,MAAO,GAAd,oBAED,kBAAC,IAAD,CAAKC,GAAI,CAACH,KAAK,IAAKI,GAAI,CAACJ,KAAK,IAAKK,GAAI,CAACL,KAAK,KAC9C,0BAAMM,SAjCS,SAACC,GACpBA,EAAEC,iBACFlB,EAAQJ,GACRC,EAAS,MA+BH,kBAAC,IAAD,CACEsB,KAAK,OACLvB,MAAOA,EACPwB,SAAU,SAAAH,GACRpB,EAASoB,EAAEI,OAAOzB,QAEpB0B,YAAU,EACVC,UAAQ,IAEV,kBAAC,IAAD,CAAQJ,KAAK,UAAUK,SAAS,SAASC,OAAK,EAACpB,MAAO,CAACqB,MAAM,QAAQf,UAAU,SAA/E,YACA,kBAAC,IAAD,CAAQQ,KAAK,UAAUQ,QAAM,EAACF,OAAK,EAACpB,MAAO,CAACqB,MAAM,QAAQf,UAAU,QAAQiB,QAAS,WArB3F7B,EAAS,KAqBmG8B,GAAG,aAAzG,iBAIF,kBAAC,IAAD,CAAKd,GAAI,CAACL,KAAK,EAAEoB,OAAO,GAAIjB,GAAI,CAACH,KAAK,GAAGoB,OAAO,GAAIhB,GAAI,CAACJ,KAAK,GAAGoB,OAAO,IACxE,kBAAC,IAAD,CAAMC,WAAW,cACdjC,EAAMkC,KAAI,SAACC,EAAaC,GAAd,OACP,kBAAC,IAAKC,KAAN,CACEC,IAAKF,EACL7B,MAAO,CAACgC,eAAeJ,EAAK9B,SAAS,eAAe,GAAGmC,SAAS,QAChEC,QAAS,CAAC,uBAAGH,IAAKF,EAAON,QAAS,kBA3C3B,SAACM,GACpB,IAAMM,EAAmBC,MAAMC,KAAK5C,GACpC0C,EAAQN,GAAO/B,UAAYqC,EAAQN,GAAO/B,SAC1CJ,EAASyC,GAwC2CG,CAAaT,KAAUD,EAAK9B,SAAW,cAAgB,YAAgB,uBAAGiC,IAAKF,EAAON,QAAS,kBArClI,SAACM,GAClB,IAAMM,EAAmBC,MAAMC,KAAK5C,GACpC0C,EAAQI,OAAOV,EAAO,GACtBnC,EAASyC,GAkCgJK,CAAWX,KAAzC,WAG9GD,EAAKhC,aChEF6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e26050bc.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport \"./App.css\";\nimport { Typography } from \"antd\";\nimport { Input } from \"antd\";\nimport { Row, Col } from \"antd\";\nimport { Button } from 'antd';\nimport {List} from 'antd';\nconst { Title } = Typography;\n\ntype FormElem = React.FocusEvent<HTMLFormElement>;\ninterface ITodo {\n  text: string;\n  complete: boolean;\n}\n\nfunction App() {\n  const [value, setValue] = useState<string>(\"\");\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  const handleSubmit = (e: FormElem): void => {\n    e.preventDefault();\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  const addTodo = (text: string): void => {\n    const newTodos: ITodo[] = [...todos, { text, complete: false }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (index: number): void => {\n    const newTodo: ITodo[] = Array.from(todos);\n    newTodo[index].complete = !newTodo[index].complete;\n    setTodos(newTodo);\n  };\n\n  const removeTodo = (index: number): void => {\n    const newTodo: ITodo[] = Array.from(todos);\n    newTodo.splice(index, 1);\n    setTodos(newTodo);\n  };\n  const removeAll=():void=>{\n    setTodos([]);\n  }\n\n  return (\n    <Fragment>\n      <Row gutter={[16,10]} style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'}}>\n        <Col span={12} style={{marginTop:\"16px\"}}>\n          <Title level={1}>Pan's Todo List</Title>\n        </Col>\n         <Col xs={{span:18}} md={{span:20}} lg={{span:12}}>\n        <form onSubmit={handleSubmit}>\n          <Input\n            type=\"text\"\n            value={value}\n            onChange={e => {\n              setValue(e.target.value);\n            }}\n            allowClear\n            required\n          />\n          <Button type=\"primary\" htmlType=\"submit\" ghost style={{width:'150px',marginTop:\"16px\"}}>Add Todo</Button>\n          <Button type=\"primary\" danger ghost style={{width:'150px',marginTop:\"16px\"}}onClick={()=>removeAll()} id=\"removeBtn\">Remove All</Button>\n        </form>\n        </Col> \n        </Row>\n        <Col lg={{span:8,offset:8}} xs={{span:18,offset:3}} md={{span:16,offset:4}}>\n        <List itemLayout='horizontal'>\n          {todos.map((todo: ITodo, index: number) => (\n              <List.Item\n                key={index}\n                style={{textDecoration:todo.complete?'line-through':\"\",fontSize:'24px'}}\n                actions={[<a key={index} onClick={() => completeTodo(index)} >{todo.complete ? \"incompelete\" : \"Complete\"}</a>,<a key={index} onClick={() => removeTodo(index)}> &times;</a>]}\n               \n              >\n                {todo.text}\n              </List.Item>\n             \n          ))}\n        </List>\n        </Col>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}